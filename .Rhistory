# global coherence index - sum of nSum / max (obersavtions*nk)
glob <-sum(neigh_df4[grep(paste0("nSum",nk),colnames(neigh_df4))]) /
(nk*nrow(neigh_df4))
# corrected global coherence index - glob in realtion to n class in type
glob_corr <- (glob - 1/length(table(cl))) / (1 - 1/length(table(cl)))
cat(paste0("global coh: ",round(glob,2)),sep = "/n")
# return #####################################################################
print(glob)
print(glob_corr)
return(neigh_df4)
}
test2 <- coherenceIndex(wgs,wgs$type,2,3,nk=10,reverse = T)
test2 <- coherenceIndex(wgs,wgs$type,2,3,nk=11,reverse = T)
test2 <- coherenceIndex(wgs,wgs$type,2,3,nk=15,reverse = T)
test2 <- coherenceIndex(wgs,wgs$type,2,3,nk=20,reverse = T)
nnwhich
library(LinguGeo)
require(MASS)
require(SearchTrees)
require(BAMMtools)
require(RColorBrewer)
require(deldir)
dat
colnames(dat)
head(dat)
colnames(dat)
colnames(csv)
kde <- kde2d(csv$lat, csv$long, n = 25, h = c(.2, .2))
kde
kde_grid <- data.frame(with(kde, expand.grid(x,y)), as.vector(kde$z))
kde_grid
expand.grid(x,y))
kde$z
as.vector(kde$z)
kde
with(kde, expand.grid(x,y))
(kde, expand.grid(x,y))
expand.grid(x,y)
expand.grid(kde)
kde
kde <- kde2d(csv$lat, csv$long, n = 25, h = c(.2, .2))
expgr <- expand.grid(kde))
expgr <- expand.grid(kde)
kde_grid
head(kde_grid)
names(kde_grid) <- c("xgr", "ygr", "zgr")
head(kde_grid)
head(expgr)
as.vector(expgr$z)
expgr$z <-as.vector(expgr$z))
expgr$z <-as.vector(expgr$z)
head(kde_grid)
head(expgr)
with(kde, expand.grid(x,y))
kde <- kde2d(csv$lat, csv$long, n = 25, h = c(.2, .2))
head(kde)
head(kde$z)
as.vector(kde$z)
expgr <- expand.grid(kde)
head(expgr)
expgr$z <-as.vector(kde$z)
head(kde_grid)
head(expgr)
kde_grid <- data.frame(with(kde, expand.grid(x,y)), as.vector(kde$z))
expgr <- expand.grid(kde)
head(kde_grid)
head(expgr)
identical(kde_grid,expgr)
all.equal(kde_grid,expgr)
names(expgr) <- c("xgr", "ygr", "zgr")
head(kde_grid)
head(expgr)
all.equal(kde_grid,expgr)
names(kde_grid) <- c("xgr", "ygr", "zgr")
names(expgr) <- c("xgr", "ygr", "zgr")
head(kde_grid)
head(expgr)
all.equal(kde_grid,expgr)
expgr <- as.data.frame(expgr)
head(kde_grid)
head(expgr)
all.equal(kde_grid,expgr)
kde_grid <- data.frame(with(kde, expand.grid(x,y)), as.vector(kde$z))
expgr <- expand.grid(kde)
expgr$z <-as.vector(kde$z)
names(kde_grid) <- c("xgr", "ygr", "zgr")
names(expgr) <- c("xgr", "ygr", "zgr")
expgr <- as.data.frame(expgr)
head(kde_grid)
head(expgr)
all.equal(kde_grid,expgr)
kde_model <- loess(zgr~xgr*ygr,
data = kde_grid,
span = .1)
pointdens <- predict(kde_model,
newdata = data.frame(ygr = DF$long, xgr = DF$lat))
pointdens <- predict(kde_model,
newdata = data.frame(ygr = dat$long, xgr = dat$lat))
plot(pointdens)
pointdens.fun <- function(DF) {
kde <- kde2d(DF$lat, DF$long, n = 25, h = c(.2, .2))
kde_grid <- data.frame(with(kde, expand.grid(x,y)), as.vector(kde$z))
kde_model <- loess(zgr~xgr*ygr,
data = kde_grid,
span = .1)
pointdens <- predict(kde_model,
newdata = data.frame(ygr = DF$long, xgr = DF$lat))
plot(pointdens)
return(pointdens)
}
test <- pointdens.fun(dat)
pointdens.fun <- function(DF) {
kde <- kde2d(DF$lat, DF$long, n = 25, h = c(.2, .2))
kde_grid <- data.frame(with(kde, expand.grid(x,y)), as.vector(kde$z))
names(kde_grid) <- c("xgr", "ygr", "zgr")
kde_model <- loess(zgr~xgr*ygr,
data = kde_grid,
span = .1)
pointdens <- predict(kde_model,
newdata = data.frame(ygr = DF$long, xgr = DF$lat))
return(pointdens)
}
test <- pointdens.fun(dat)
plot(test)
pointdens.fun <- function(DF) {
kde <- kde2d(DF$lat, DF$long, n = 2, h = c(.2, .2))
kde_grid <- data.frame(with(kde, expand.grid(x,y)), as.vector(kde$z))
names(kde_grid) <- c("xgr", "ygr", "zgr")
kde_model <- loess(zgr~xgr*ygr,
data = kde_grid,
span = .1)
pointdens <- predict(kde_model,
newdata = data.frame(ygr = DF$long, xgr = DF$lat))
return(pointdens)
}
test <- pointdens.fun(dat)
plot(test)
pointdens.fun <- function(DF) {
kde <- kde2d(DF$lat, DF$long, n = 20, h = c(.2, .2))
kde_grid <- data.frame(with(kde, expand.grid(x,y)), as.vector(kde$z))
names(kde_grid) <- c("xgr", "ygr", "zgr")
kde_model <- loess(zgr~xgr*ygr,
data = kde_grid,
span = .1)
pointdens <- predict(kde_model,
newdata = data.frame(ygr = DF$long, xgr = DF$lat))
return(pointdens)
}
test <- pointdens.fun(dat)
plot(test)
pointdens.fun <- function(DF) {
kde <- kde2d(DF$lat, DF$long, n = 10, h = c(.2, .2))
kde_grid <- data.frame(with(kde, expand.grid(x,y)), as.vector(kde$z))
names(kde_grid) <- c("xgr", "ygr", "zgr")
kde_model <- loess(zgr~xgr*ygr,
data = kde_grid,
span = .1)
pointdens <- predict(kde_model,
newdata = data.frame(ygr = DF$long, xgr = DF$lat))
return(pointdens)
}
test <- pointdens.fun(dat)
plot(test)
mapview::mapview(dat)
plot(test)
mapview::mapview(dat[1:10])
mapview::mapview(dat[1:10,])
mapview::mapview(dat[[1:10,]])
mapview::mapview(dat[[1:10]])
mapview::mapview(dat[,1:10])
dat
dat$lfd[1:20]
mapview::mapview(dat[1:10])
mapview::mapview(dat[1:10,])
mapview::mapview(dat$lfd[1:10,])
mapview::mapview(dat$lfd[1:10])
dat$lfd[1:20]
dat[[1:10]]
dat[[1:10,]]
dat
dat[dat$lfd==1:10]
dat[dat$lfd==1]
dat[c(1,1:10)]
dat[c(1,1:10),]
mapview::mapview(dat[c(1,1:10),])
plot(dat[c(1,1:10),])
plot(dat[c(1:10),])
(dat[c(1:10),])
mapview::mapview(dat[c(1:10),])
mapview::mapview(dat)
mapview::mapview(dat$lfd)
mapview::mapview(dat$utm_n)
mapview::mapview(dat[1:10])
mapview::mapview(dat[,1:10])
mapview::mapview(dat[1,1:10])
mapview::mapview(dat[1,1:10,1])
mapview::mapview(dat[1:10,1])
dat[1:10,1]
(dat[1:10,])
mapview::mapview(dat[dat$lfd==c(1:10)])
mapview::mapview(dat[dat$lfd=c(1:10)])
mapview::mapview(dat[dat$lfd(1:10)])
mapview::mapview(dat[dat$lfd])
mapview::mapview(dat[dat$lfd],)
sub <- dat[c(1:10),]
mapview::mapview(sub)
plot(test)
test <- pointdens.fun(dat[1:10,])
plot(test)
mapview::mapview(sub)
pointdens.fun <- function(DF) {
kde <- kde2d(DF$lat, DF$long, n = 25, h = c(.2, .2))
kde_grid <- data.frame(with(kde, expand.grid(x,y)), as.vector(kde$z))
names(kde_grid) <- c("xgr", "ygr", "zgr")
kde_model <- loess(zgr~xgr*ygr,
data = kde_grid,
span = .1)
pointdens <- predict(kde_model,
newdata = data.frame(ygr = DF$long, xgr = DF$lat))
return(pointdens)
}
test <- pointdens.fun(dat[1:10,])
plot(test)
test <- pointdens.fun(dat)
plot(test)
test <- pointdens.fun(dat)
test
hist(test)
pointdens.fun <- function(DF) {
kde <- kde2d(DF$lat, DF$long, n = 25, h = c(.2, .2))
kde_grid <- data.frame(with(kde, expand.grid(x,y)), as.vector(kde$z))
names(kde_grid) <- c("xgr", "ygr", "zgr")
kde_model <- loess(zgr~xgr*ygr,
data = kde_grid,
span = .2)
pointdens <- predict(kde_model,
newdata = data.frame(ygr = DF$long, xgr = DF$lat))
return(pointdens)
}
test <- pointdens.fun(dat)
plot(test)
hist(test)
test <- pointdens.fun(dat[1:300,])
plot(test)
hist(test)
plot(test)
plot(dat[c(1:300),])
sub <- dat[c(1:300),]
mapview::mapview(sub)
pointdens.fun <- function(DF,DF2) {
kde <- kde2d(DF$lat, DF$long, n = 25, h = c(.2, .2))
kde_grid <- data.frame(with(kde, expand.grid(x,y)), as.vector(kde$z))
names(kde_grid) <- c("xgr", "ygr", "zgr")
kde_model <- loess(zgr~xgr*ygr,
data = kde_grid,
span = .2)
pointdens <- predict(kde_model,
newdata = data.frame(ygr = DF2$long, xgr = DF2$lat))
return(pointdens)
}
test <- pointdens.fun(dat[1:300,],DF2 = dat)
plot(test)
test <- pointdens.fun(dat[1:400,],DF2 = dat)
plot(test)
pointdens.fun <- function(DF,DF2) {
kde <- kde2d(DF$lat, DF$long, n = 25, h = c(.2, .2))
kde_grid <- data.frame(with(kde, expand.grid(x,y)), as.vector(kde$z))
names(kde_grid) <- c("xgr", "ygr", "zgr")
kde_model <- loess(zgr~xgr*ygr,
data = kde_grid,
span = .2)
pointdens <- predict(kde_model,
newdata = data.frame(ygr = DF$long, xgr = DF$lat))
return(pointdens)
}
test <- pointdens.fun(dat[1:400,],DF2 = dat)
plot(test)
test <- pointdens.fun(dat,DF2 = dat)
plot(test)
hist(test)
plot(test)
csv <- read.csv(system.file("extdata","hunde.csv",package = "LinguGeo"),row.names = 1)
wgs <- readOGR(system.file("extdata","hunde_wgs.shp",package = "LinguGeo"))
test1 <- pointdens.fun(csv)
plot(test)
test1 <- pointdens.fun(wgs)
plot(test)
test2 <- pointdens.fun(csv[1:300,])
plot(test2)
test3 <- pointdens.fun(csv[1:400,])
plot(test3)
# what is the outpu scale? It is the Density of Points, but what does it say for each point (eg "1.2")
test3[1]
# what is the outpu scale? It is the Density of Points, but what does it say for each point (eg "1.2")
test3[2]
test3[145] # 0.77 what?
test2[2]
test2[145]
test <- pointdens.fun(dat,DF2 = dat)
hunde_var1 <- filter(csv, type == "nd")
hunde_var2 <- filter(csv, type == "ng")
hunde_var3 <- filter(csv, type == "nn")
csv
head(csv)
hunde_var1 <- filter(csv, type == "nd")
hunde_var1 <- dplyr::filter(csv, type == "nd")
hunde_var2 <- dplyr::filter(csv, type == "ng")
hunde_var3 <- dplyr::filter(csv, type == "nn")
hunde_var1$pointdens <- pointdens.fun(hunde_var1)
hunde_var2$pointdens <- pointdens.fun(hunde_var2)
hunde_var_long <- rbind(hunde_var1, hunde_var2)
head(hunde_var_long)
###---------------------------------------------------------------------
# get grid
coordinates(hunde) = c("long", "lat")
###---------------------------------------------------------------------
# get grid
coordinates(csv) = c("long", "lat")
set.seed(123)
test.hunde <- spsample(csv, n = 550, type = "regular")
coordinates(test.hunde)
tree.hunde <- createTree(coordinates(csv))
inds.hunde <- knnLookup(tree.hunde, newdat = coordinates(test.hunde), k=1)
test.sample.hunde <- hunde_red[inds.hunde[,],]
test.sample.hunde <- csv[inds.hunde[,],]
test.sample.hunde <- test.sample.hunde[which(!duplicated(test.sample.hunde$site)), ]
hunde_var_bal.1 <- filter(as.data.frame(test.sample.hunde), type == "nd")
test.sample.hunde
test.hunde
tree.hunde
test.sample.hunde
inds.hunde
test.sample.hunde
csv[inds.hunde[,],]
test.sample.hunde <- csv[inds.hunde[,],]
test.sample.hunde
hunde_var_bal.1 <- filter(as.data.frame(test.sample.hunde), type == "nd")
hunde_var_bal.1 <- dplyr::filter(as.data.frame(test.sample.hunde), type == "nd")
hunde_var_bal.2 <- dplyr::filter(as.data.frame(test.sample.hunde), type == "ng")
hunde_var_bal.3 <- dplyr::filter(as.data.frame(test.sample.hunde), type == "nn")
hunde_var_bal.1$pointdens <- pointdens.fun(hunde_var_bal.1)
hunde_var_bal.2$pointdens <- pointdens.fun(hunde_var_bal.2)
hunde_var_bal.3$pointdens <- pointdens.fun(hunde_var_bal.3)
hunde_var_bal_long <- rbind(hunde_var_bal.1, hunde_var_bal.2, hunde_var_bal.3)
hunde_var_bal.1$jenks <- jenks.fun(hunde_var_bal.1$pointdens)
hunde_vor <-
geom_voronoi(data = hunde_var_bal_long, aes(long,lat, fill = jenksRGB),
outline = shp, col = "black", size = .2) +
geom_polygon(data = shp, aes(long, lat), alpha = 0, col = "black") +
geom_point(data = hunde_var_bal_long, aes(long,lat), size = .1) +
labs(x = NULL, y = NULL,
title = "Subtraktion ('Hunde')",
subtitle = paste0("KDE (balanced sample: ", nrow(hunde_var_bal_long), " sites; natural breaks)")) +
scale_fill_identity() +
theme_void() +
theme(legend.position = "none",
legend.title = element_blank())
require(ggmap)
hunde_vor <-
geom_voronoi(data = hunde_var_bal_long, aes(long,lat, fill = jenksRGB),
outline = shp, col = "black", size = .2) +
geom_polygon(data = shp, aes(long, lat), alpha = 0, col = "black") +
geom_point(data = hunde_var_bal_long, aes(long,lat), size = .1) +
labs(x = NULL, y = NULL,
title = "Subtraktion ('Hunde')",
subtitle = paste0("KDE (balanced sample: ", nrow(hunde_var_bal_long), " sites; natural breaks)")) +
scale_fill_identity() +
theme_void() +
theme(legend.position = "none",
legend.title = element_blank())
library(ggvoronoi)
hunde_var_bal_long
mapview::mapview(hunde_var_bal_long)
plot(hunde_var_bal_long)
hunde_vor <-
geom_voronoi(data = hunde_var_bal_long, aes(long,lat, fill = jenksRGB),
outline = shp, col = "black", size = .2) +
geom_polygon(data = shp, aes(long, lat), alpha = 0, col = "black") +
geom_point(data = hunde_var_bal_long, aes(long,lat), size = .1) +
labs(x = NULL, y = NULL,
title = "Subtraktion ('Hunde')",
subtitle = paste0("KDE (balanced sample: ", nrow(hunde_var_bal_long), " sites; natural breaks)")) +
scale_fill_identity() +
theme_void() +
theme(legend.position = "none",
legend.title = element_blank())
install.packages("ggvoronoi")
library(ggvoronoi)
pointdens.fun <- function(DF,DF2) {
kde <- kde2d(DF$lat, DF$long, n = 25, h = c(.2, .2))
kde_grid <- data.frame(with(kde, expand.grid(x,y)), as.vector(kde$z))
names(kde_grid) <- c("xgr", "ygr", "zgr")
kde_model <- loess(zgr~xgr*ygr,
data = kde_grid,
span = .2)
pointdens <- predict(kde_model,
newdata = data.frame(ygr = DF$long, xgr = DF$lat))
return(pointdens)
}
hunde_vor <-
geom_voronoi(data = hunde_var_bal_long, aes(long,lat, fill = jenksRGB),
outline = shp, col = "black", size = .2) +
geom_polygon(data = shp, aes(long, lat), alpha = 0, col = "black") +
geom_point(data = hunde_var_bal_long, aes(long,lat), size = .1) +
labs(x = NULL, y = NULL,
title = "Subtraktion ('Hunde')",
subtitle = paste0("KDE (balanced sample: ", nrow(hunde_var_bal_long), " sites; natural breaks)")) +
scale_fill_identity() +
theme_void() +
theme(legend.position = "none",
legend.title = element_blank())
hunde_vor <-
geom_voronoi(data = hunde_var_bal_long
, col = "black", size = .2) +
geom_polygon(data = shp, aes(long, lat), alpha = 0, col = "black") +
geom_point(data = hunde_var_bal_long, aes(long,lat), size = .1) +
labs(x = NULL, y = NULL,
title = "Subtraktion ('Hunde')",
subtitle = paste0("KDE (balanced sample: ", nrow(hunde_var_bal_long), " sites; natural breaks)")) +
scale_fill_identity() +
theme_void() +
theme(legend.position = "none",
legend.title = element_blank())
hunde_vor <-
geom_voronoi(data = hunde_var_bal_long
, col = "black", size = .2) +
geom_point(data = hunde_var_bal_long, aes(long,lat), size = .1) +
labs(x = NULL, y = NULL,
title = "Subtraktion ('Hunde')",
subtitle = paste0("KDE (balanced sample: ", nrow(hunde_var_bal_long), " sites; natural breaks)")) +
scale_fill_identity() +
theme_void() +
theme(legend.position = "none",
legend.title = element_blank())
hunde_vor <-  ggplot(utm)+
geom_voronoi(data = hunde_var_bal_long
, col = "black", size = .2) +
geom_point(data = hunde_var_bal_long, aes(long,lat), size = .1) +
labs(x = NULL, y = NULL,
title = "Subtraktion ('Hunde')",
subtitle = paste0("KDE (balanced sample: ", nrow(hunde_var_bal_long), " sites; natural breaks)")) +
scale_fill_identity() +
theme_void() +
theme(legend.position = "none",
legend.title = element_blank())
write.csv(hunde_var_bal_long,"C:/Envimaster/hundetest.csv")
hunde_red <-csv
ggplot(hunde_red, aes(long, lat, col = type)) +
geom_point() +
geom_density_2d(h = .1, alpha = .3, bins = 20) +
scale_color_manual(values=c("black", "red", "orange")) +
labs(x = NULL, y = NULL) +
theme_void() +
theme(legend.position = "none")
hunde_red
csv
# load data
csv <- read.csv(system.file("extdata","hunde.csv",package = "LinguGeo"),row.names = 1)
csv
hunde_red <-csv
ggplot(hunde_red, aes(long, lat, col = type)) +
geom_point() +
geom_density_2d(h = .1, alpha = .3, bins = 20) +
scale_color_manual(values=c("black", "red", "orange")) +
labs(x = NULL, y = NULL) +
theme_void() +
theme(legend.position = "none")
ggplot(dplyr::filter(hunde_red, grepl("ng|nn", type)), aes(long, lat, col = type)) +
geom_point(data = dplyr::filter(hunde_red, grepl("nd", type)),
aes(long, lat, col = type),
size = 1) +
geom_point() +
geom_density_2d(h = .1, alpha = .3, bins = 20) +
scale_color_manual(values=c("black", "red", "orange")) +
labs(x = NULL, y = NULL) +
theme_void() +
theme(legend.position = "right")
ggplot(hunde_var_bal_long, aes(long, lat, col = type)) +
geom_point() +
geom_density_2d(h = .1, alpha = .3, bins = 20) +
scale_color_manual(values=c("black", "red", "orange")) +
labs(x = NULL, y = NULL) +
theme_void() +
theme(legend.position = "none")
ggplot(dplyr::filter(hunde_red, grepl("ng|nn", type)), aes(long, lat, col = type)) +
geom_voronoi(data = hunde_var_bal_long,
col = "black", size = .2) +
geom_point(data = dplyr::filter(hunde_red, grepl("nd", type)),
aes(long, lat, col = type),
size = 1) +
geom_point() +
geom_density_2d(h = .1, alpha = .3, bins = 20) +
scale_color_manual(values=c("black", "red", "orange")) +
labs(x = NULL, y = NULL) +
theme_void() +
theme(legend.position = "right")
ggplot(dplyr::filter(hunde_red, grepl("ng|nn", type)), aes(long, lat, col = type)) +
geom_voronoi(data = hunde_var_bal_long,
col = "black", size = .2) +
geom_point(data = dplyr::filter(hunde_red, grepl("nd", type)),
aes(long, lat, col = type),
size = 1) +
geom_point() +
geom_density_2d(h = .1, alpha = .3, bins = 20) +
scale_color_manual(values=c("black", "red", "orange")) +
labs(x = NULL, y = NULL) +
theme_void() +
theme(legend.position = "right")
test.sample.hunde <- test.sample.hunde[which(!duplicated(test.sample.hunde$site)), ]
test.sample.hunde
test.sample.hunde
library(LinguGeo)
